{"mappings":"AAgBA,OAAO,MAAM,UAAU,OAAO,OAMrB,CAAC;AACV,OAAO,MAAM,QAAQ,OAAO,KAkEnB,CAAC","sources":["proxy/proxy/index.ts","proxy/index.ts"],"sourcesContent":[null,"import { _WeakMap } from \"@portal-solutions/semble-weak-map\";\nimport { polyfillKeys } from \"@portal-solutions/semble-common\";\nconst _proxyData: WeakMap<any, { object: any, handler: ProxyHandler<any> }> = new _WeakMap();\nfunction protoChain<T extends object, X extends keyof T, U, Args extends unknown[]>(val: T, key: X, f: <T2 extends { [X2 in X]: any }>(t: T2, key: X, ...args: Args) => U, ...args: Args): U {\n    while (1) {\n        if (_Reflect.getOwnPropertyDescriptor(val, key)) {\n            return f(val, key, ...args);\n        }\n        val = _Reflect.getPrototypeOf(val) as T; //Simulate tail recursion\n    }\n    throw ``\n}\nfunction protoChained<T extends object, X extends keyof T, U, Args extends unknown[]>(f: <T2 extends { [X2 in X]: any }>(t: T2, key: X, ...args: Args) => U): (val: T, key: X, ...args: Args) => U {\n    return (val, key, ...args) => protoChain(val, key, f, ...args);\n}\nconst isPolyfillKey = a => (typeof a === \"string\" || typeof a === \"symbol\") && a in polyfillKeys;\nexport const _Reflect: typeof Reflect = 'Reflect' in globalThis ? globalThis.Reflect : ({\n    apply: Function.prototype.apply.call.bind(Function.prototype.apply),\n    construct: (target, args, self) => _proxyData.has(target) && 'construct' in _proxyData.get(target)!.handler! ? _proxyData.get(target)!.handler.construct!(_proxyData.get(target)!.object, args, self) : target === self ? new target(...args) : _Reflect.apply(target, self, args),\n    get: protoChained((object, key) => _proxyData.has(object) && 'get' in _proxyData.get(object)!.handler && !isPolyfillKey(key)? _proxyData.get(object)!.handler.get!(_proxyData.get(object)!.object, key, object) : object[key]),\n    set: protoChained((object, key, value) => _proxyData.has(object) && 'set' in _proxyData.get(object)!.handler && !isPolyfillKey(key)? (_proxyData.get(object)!.handler.set!(_proxyData.get(object)!.object, key, value, object)) : (((object as any)[key] = value), true)),\n    setPrototypeOf: ((old, a, b) => (old(a, b), true)).bind(null, 'setPrototypeOf' in Object ? Object.setPrototypeOf.bind(Object) : ((a,b) => (a.__proto__ = b, a)))\n}) as any;\nexport const _Proxy: typeof Proxy = 'Proxy' in globalThis ? globalThis.Proxy : (class ProxyTemp extends Function {\n    static __call = Function.prototype.call.call.bind(Function.prototype.call);\n    constructor(object, handler: ProxyHandler<any>) {\n        if (false) super(); //Obey TS\n        const m = ProxyTemp.__create(object, handler);\n        _Reflect.setPrototypeOf(m, ProxyTemp.prototype);\n        return m\n    }\n    static __create(object, handler: ProxyHandler<any>) {\n        const fn = function (...args) {\n            if (this instanceof fn) {\n                if ('construct' in handler) {\n                    return handler.construct!(object, args, this);\n                }\n                return new object(...args);\n            } else {\n                if ('apply' in handler) {\n                    return handler.apply!(object, this, args);\n                }\n                return ProxyTemp.__call(object, this, ...args);\n            }\n        };\n        _proxyData.set(fn, { object, handler });\n        return fn;\n    }\n    static {\n        for (const trap of ['defineProperty', 'getOwnPropertyDescriptor', 'getOwnPropertyDescriptors', 'freeze', 'seal', 'preventExtensions', 'getPrototypeOf', 'setPrototypeOf']) {\n            if (trap in Object) {\n                _Reflect[trap] = new ProxyTemp(trap in _Reflect ? _Reflect[trap] : Object[trap].bind(Object), {\n                    apply(target, self, args) {\n                        if (_proxyData.has(args[0])) {\n                            if (trap in _proxyData.get(args[0])?.handler!) {\n                                return _proxyData.get(args[0])?.handler?.[trap]?.(...args);\n                            } else {\n                                args[0] = _proxyData.get(args[0])!.object;\n                                return _Reflect.apply(target, self, args)\n                            }\n                        } else {\n                            return _Reflect.apply(target, self, args);\n                        }\n                    }\n                });\n                Object[trap] = new ProxyTemp(Object[trap], {\n                    apply(target, self, args) {\n                        if (_proxyData.has(args[0])) {\n                            if (trap in _proxyData.get(args[0])?.handler!) {\n                                return _proxyData.get(args[0])?.handler?.[trap]?.(...args);\n                            } else {\n                                args[0] = _proxyData.get(args[0])!.object;\n                                return _Reflect.apply(target, self, args)\n                            }\n                        } else {\n                            return _Reflect.apply(target, self, args);\n                        }\n                    }\n                });\n\n            }\n        }\n        Function.prototype.toString = new ProxyTemp(Function.prototype.toString, {\n            apply(target, thisArg, argArray) {\n                while (_proxyData.has(thisArg)) thisArg = _proxyData.get(thisArg)!.object;\n                return _Reflect.apply(target, thisArg, argArray);\n            },\n        }) as any;\n    }\n}) as any;"],"names":[],"version":3,"file":"index.d.ts.map"}